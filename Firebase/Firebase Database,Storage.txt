Usually firebase will automatically add dependencies, bot u can add bom, then no neeed of version name
implementation platform('com.google.firebase:firebase-bom:28.4.1')
implementation 'com.google.firebase:firebase-auth'
implementation 'com.google.firebase:firebase-database'





Firebase database and Storage:

package com.example.meetup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.database.Cursor;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;

import com.example.meetup.databinding.ActivitySetUpBinding;
import com.example.meetup.databinding.ActivitySignInBinding;
import com.example.meetup.model.Users;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

public class SetUpActivity extends AppCompatActivity {

    private static final int REQUEST_CODE = 101;
    ActivitySetUpBinding binding;

    Uri imageUri;

    FirebaseAuth mAuth;
    FirebaseUser mUser;
    DatabaseReference mRef;
    StorageReference StorageRef;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivitySetUpBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        getSupportActionBar().hide();

        mAuth = FirebaseAuth.getInstance();
        mUser = mAuth.getCurrentUser();
        mRef = FirebaseDatabase.getInstance().getReference().child("Users");
        StorageRef = FirebaseStorage.getInstance().getReference().child("ProfileImage");

        binding.profileImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(i, REQUEST_CODE);
            }
        });

        binding.submitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                saveData();
            }
        });
    }

    private void saveData() {

        String userName = binding.name.getText().toString();
        String city = binding.cityId.getText().toString();
        String country = binding.country.getText().toString();
        String profession = binding.proffesion.getText().toString();

        if(userName.isEmpty() || userName.length()<3){
            showError(binding.name,"Username is not valid");
        }
        else if(city.isEmpty()){
            showError(binding.cityId,"City is not valid");
        }
        else if(country.isEmpty()){
            showError(binding.country,"Country is not valid");
        }
        else if(profession.isEmpty() || profession.length()<3){
            showError(binding.proffesion,"Profession is not valid");
        }
        else if(imageUri==null){
            Toast.makeText(this,"Please select an image",Toast.LENGTH_SHORT).show();
        }
        else{
            StorageRef.child(mUser.getUid()).putFile(imageUri).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {
                @Override
                public void onComplete(@NonNull  Task<UploadTask.TaskSnapshot> task) {
                    if(task.isSuccessful())
                    {
                        StorageRef.child(mUser.getUid()).getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                            @Override
                            public void onSuccess(Uri uri) {
                                Users user = new Users(binding.name.getText().toString(),binding.cityId.getText().toString(),binding.country.toString(),binding.proffesion.getText().toString(),uri.toString(),"Offline");
                                //instead of using Users class, u can use HashMap
                                mRef.child(mUser.getUid()).setValue(user).addOnSuccessListener(new OnSuccessListener<Void>() {
                                    @Override
                                    public void onSuccess(Void unused) {
                                        Intent intent = new Intent(SetUpActivity.this,MainActivity.class);
                                        startActivity(intent);
                                        Toast.makeText(SetUpActivity.this, "Setup Profile Completed", Toast.LENGTH_SHORT).show();

                                    }
                                }).addOnFailureListener(new OnFailureListener() {
                                    @Override
                                    public void onFailure(@NonNull Exception e) {
                                        Toast.makeText(SetUpActivity.this, e.toString(), Toast.LENGTH_SHORT).show();
                                    }
                                });
                            }
                        });
                    }
                }
            });
        }
    }

    private void showError(EditText input, String s) {
        input.setError(s);
        input.requestFocus();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable  Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(requestCode==REQUEST_CODE && resultCode==RESULT_OK && data!=null){
            imageUri = data.getData();
            binding.profileImage.setImageURI(imageUri);
        }
    }
}

























Users Class:



package com.example.meetup.model;

public class Users {
    String userName, email, password,city,country,profession,status, profileImage;

    public Users() {
    }

    public Users(String userName, String city, String counrty, String profession,  String profileImage,String status) {
        this.userName = userName;
        this.city = city;
        this.country = counrty;
        this.profession = profession;
        this.status = status;
        this.profileImage = profileImage;
    }


    public String getUserName() {
        return userName;
    }

    public String getEmail() {
        return email;
    }

    public String getPassword() {
        return password;
    }

    public String getCity() {
        return city;
    }

    public String getCountry() {
        return country;
    }

    public String getProfession() {
        return profession;
    }

    public String getStatus() {
        return status;
    }

    public String getProfileImage() {
        return profileImage;
    }
}



























Auth:




package com.example.meetup;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import com.example.meetup.databinding.ActivitySignUpBinding;
import com.example.meetup.model.Users;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;

public class SignUpActivity extends AppCompatActivity {

    ActivitySignUpBinding binding;

    private FirebaseAuth auth;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivitySignUpBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        getSupportActionBar().hide();
        auth = FirebaseAuth.getInstance();

        binding.alreadyAccountId.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(SignUpActivity.this,SignInActivity.class);
                startActivity(i);
                finish();
            }
        });



        binding.signUpButtonId.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                auth.createUserWithEmailAndPassword(binding.emailId.getText().toString(),binding.passwordId.getText().toString())
                        .addOnCompleteListener(new OnCompleteListener<AuthResult>() {
                            @Override
                            public void onComplete(@NonNull Task<AuthResult> task) {
                                if(task.isSuccessful()){
                                    
                                    Intent i = new Intent(SignUpActivity.this,SetUpActivity.class);
                                    startActivity(i);
                                    finish();

                                    Toast.makeText(SignUpActivity.this,"Account Sucessfully Created",Toast.LENGTH_SHORT).show();
                                }else{
                                    Toast.makeText(SignUpActivity.this,task.getException().getMessage(),Toast.LENGTH_SHORT).show();
                                }
                            }
                        });
            }
        });
    }
}

































If u just wanna auth and save email,username,password(database):




package com.example.meetup;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import com.example.meetup.databinding.ActivitySignUpBinding;
import com.example.meetup.model.Users;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;

public class SignUpActivity extends AppCompatActivity {

    ActivitySignUpBinding binding;
    private FirebaseAuth auth;
    FirebaseDatabase database;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivitySignUpBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        getSupportActionBar().hide();
        auth = FirebaseAuth.getInstance();
        database = FirebaseDatabase.getInstance();

        binding.alreadyAccountId.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(SignUpActivity.this,SignInActivity.class);
                startActivity(i);
                finish();
            }
        });



        binding.signUpButtonId.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                auth.createUserWithEmailAndPassword(binding.emailId.getText().toString(),binding.passwordId.getText().toString())
                        .addOnCompleteListener(new OnCompleteListener<AuthResult>() {
                            @Override
                            public void onComplete(@NonNull Task<AuthResult> task) {
                                if(task.isSuccessful()){
                                    Users user = new Users(binding.emailId.getText().toString(),binding.passwordId.getText().toString());
                                    String id = task.getResult().getUser().getUid();

                                    database.getReference().child("Users").child(id).setValue(user);
                                    Intent i = new Intent(SignUpActivity.this,MainActivity.class);
                                    startActivity(i);
                                    finish();

                                    Toast.makeText(SignUpActivity.this,"Account Sucessfully Created",Toast.LENGTH_SHORT).show();
                                }else{
                                    Toast.makeText(SignUpActivity.this,task.getException().getMessage(),Toast.LENGTH_SHORT).show();
                                }
                            }
                        });
            }
        });
    }
} 










To get data from database:


@Override
    protected void onStart() {
        super.onStart();

        if(mUser==null){
            Intent i = new Intent(AllActivity.this,SignInActivity.class);
            startActivity(i);
            finish();
        }else{
            mRef.child(mUser.getUid()).addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    profileImageUrlV = snapshot.child("profileImage").getValue().toString();
                    usernameV = snapshot.child("userName").getValue().toString();
                    professionV = snapshot.child("profession").getValue().toString();

                    Picasso.get().load(profileImageUrlV).into(profileImage);
                    name.setText(usernameV);
                    profession.setText(professionV);

                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    Toast.makeText(AllActivity.this,"Sorry Something Went Wrong",Toast.LENGTH_SHORT).show();
                }
            });
        }


























package com.example.meetup;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.meetup.databinding.ActivityAllBinding;
import com.example.meetup.framents.FriendsFragment;
import com.example.meetup.framents.HomeFragment;
import com.example.meetup.framents.InviteFragment;
import com.google.android.material.navigation.NavigationView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.squareup.picasso.Picasso;

import de.hdodenhof.circleimageview.CircleImageView;

public class AllActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {

    private DrawerLayout drawer;
    ActivityAllBinding binding;

    FirebaseAuth mAuth;
    FirebaseUser mUser;
    DatabaseReference mRef;
    String profileImageUrlV,usernameV,professionV;

    CircleImageView profileImage;
    TextView name,profession;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityAllBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        mAuth = FirebaseAuth.getInstance();
        mUser = mAuth.getCurrentUser();
        mRef = FirebaseDatabase.getInstance().getReference().child("Users");


        NavigationView navigationView = binding.navView;
        //to access the views present in header of drawer
        View view = navigationView.inflateHeaderView(R.layout.nav_header);

        profileImage = view.findViewById(R.id.profile_pic_header);
        name = view.findViewById(R.id.user_name_header);
        profession = view.findViewById(R.id.profession_header);

        //onClickListner for items of navigation bar
        navigationView.setNavigationItemSelectedListener(this);

        Toolbar toolbar = binding.toolbar;
        setSupportActionBar(toolbar);

        drawer = binding.drawerLayout;

        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this,drawer,toolbar,R.string.navigation_drawer_open,R.string.navigation_drawer_close);
        toggle.syncState();

        if(savedInstanceState == null){
            //at first home fragment is loaded so
            getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,new HomeFragment()).commit();
            //for indicating that home fragment is checked
            navigationView.setCheckedItem(R.id.nav_home);
        }
    }


    //if pressed back it should not close the the app, but go to home page
    @Override
    public void onBackPressed() {
        if(drawer.isDrawerOpen(GravityCompat.START)){
            drawer.closeDrawer(GravityCompat.START);
        }else{
            super.onBackPressed();
        }
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        switch (item.getItemId()){
            case R.id.nav_home:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,new HomeFragment()).commit();
                break;

            case R.id.nav_friends:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,new FriendsFragment()).commit();
                break;

            case R.id.nav_invite:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container,new InviteFragment()).commit();
                break;

            case R.id.nav_logout:
                mAuth.signOut();
                Intent i = new Intent(AllActivity.this,SignInActivity.class);
                startActivity(i);
                finish();
                break;

        }

        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    protected void onStart() {
        super.onStart();

        if(mUser==null){
            Intent i = new Intent(AllActivity.this,SignInActivity.class);
            startActivity(i);
            finish();
        }else{
            mRef.child(mUser.getUid()).addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    profileImageUrlV = snapshot.child("profileImage").getValue().toString();
                    usernameV = snapshot.child("userName").getValue().toString();
                    professionV = snapshot.child("profession").getValue().toString();

                    Picasso.get().load(profileImageUrlV).into(profileImage);
                    name.setText(usernameV);
                    profession.setText(professionV);

                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {
                    Toast.makeText(AllActivity.this,"Sorry Something Went Wrong",Toast.LENGTH_SHORT).show();
                }
            });
        }

    }
}